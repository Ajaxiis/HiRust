use eframe::{egui, epi};
use egui::RichText;
//use cmd_lib;

/// We derive Deserialize/Serialize so we can persist app state on shutdown.
#[cfg_attr(feature = "persistence", derive(serde::Deserialize, serde::Serialize))]
#[cfg_attr(feature = "persistence", serde(default))] // if we add new fields, give them default values when deserializing old state
pub struct TemplateApp {
    // Example stuff:
    label: String,
    component: String,
    version: String,
    authors: String,
    edition: String,
    rustver: String,
    methods: String,
    parametres: String,
    scode: String,
    rscode: String,
    wstatus: String,
    prj:String,
    // this how you opt-out of serialization of a member
    #[cfg_attr(feature = "persistence", serde(skip))]
    value: i32,
    
}

impl Default for TemplateApp {
    fn default() -> Self {
        Self {
            // Example stuff:
            label: "".to_owned(),
            component: "Component".to_owned(),
            version: "0.0.1".to_owned(),
            authors: "Author".to_owned(),
            edition: "2022".to_owned(),
            rustver: "1.56".to_owned(),
            methods: "array of methods by string ".to_owned(),
            parametres: "array of parameters by string ".to_owned(),
            scode: "algorithm code ".to_owned(),
            rscode: "Rust code".to_owned(),
            wstatus: "help".to_string(),
            value: 0,
            prj:"new project".to_owned(),
        }
    }
}

impl epi::App for TemplateApp {
    fn name(&self) -> &str {
        "IGRA-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–ø–ª–∏–∫–∞—Ü–∏–π"
    }

    /// Called once before the first frame.
    fn setup(
        &mut self,
        _ctx: &egui::Context,
        _frame: &epi::Frame,
        _storage: Option<&dyn epi::Storage>,
    ) {
        // Load previous app state (if any).
        // Note that you must enable the `persistence` feature for this to work.
        #[cfg(feature = "persistence")]
        if let Some(storage) = _storage {
            *self = epi::get_value(storage, epi::APP_KEY).unwrap_or_default()
        }
    }

    /// Called by the frame work to save state before shutdown.
    /// Note that you must enable the `persistence` feature for this to work.
    #[cfg(feature = "persistence")]
    fn save(&mut self, storage: &mut dyn epi::Storage) {
        epi::set_value(storage, epi::APP_KEY, self);
    }

    /// Called each time the UI needs repainting, which may be many times per second.
    /// Put your widgets into a `SidePanel`, `TopPanel`, `CentralPanel`, `Window` or `Area`.
    fn update(&mut self, ctx: &egui::Context, frame: &epi::Frame) {
        let Self {
            label,
            component,
            version,
            authors,
            edition,
            rustver,
            methods,
            parametres,
            scode,
            rscode,
            wstatus,
            value,
            prj,
        } = self;
        // Examples of how to create different panels and windows.
        // Pick whichever suits you.
        // Tip: a good default choice is to just keep the `CentralPanel`.
        // For inspiration and more examples, go to https://emilk.github.io/egui

        egui::TopBottomPanel::top("top_panel").show(ctx, |ui| {
            // The top panel is often a good place for a menu bar:

            egui::menu::bar(ui, |ui| {
                ui.horizontal(|ui| {
                    egui::widgets::global_dark_light_mode_switch(ui);
                    ui.menu_button("–§–∞–π–ª", |ui| { *value = 1;
                        if ui.button("–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç").clicked() { 
                        *wstatus = "newprj".to_string();
                        };
                        if ui.button("–ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç").clicked() { 
                            *wstatus = "nelement".to_string();
                            }
                    });

                    ui.menu_button("–ü—Ä–∞–≤–∫–∞", |ui| {
                        if ui.button("Quit").clicked() {
                            frame.quit();
                        }
                    });
                    ui.menu_button("–í–∏–¥", |ui| {
                        if ui.button("Quit").clicked() {
                            frame.quit();
                        }
                    });
                    ui.menu_button("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", |ui| {
                        if ui.button("Quit").clicked() {
                            frame.quit();
                        }
                    });
                    ui.menu_button("–ü–æ–º–æ—â—å", |ui| {
                        *wstatus = "help".to_string();

                        if ui.button("Quit").clicked() {
                            frame.quit();
                        }
                    });
                    ui.separator();
                    ui.menu_button("–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", |ui| {
                        egui::widgets::global_dark_light_mode_switch(ui);
                    });
                });
            });
            ui.horizontal(|ui| {
                if ui
                    .button(RichText::new("üñπ").size(32.0))
                    .on_hover_text("–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
                    .clicked()
                { *wstatus = "newprj".to_string();};
                if ui
                    .button(RichText::new("üìÇ").size(32.0))
                    .on_hover_text("–û—Ç–∫—Ä—ã—Ç—å")
                    .clicked()
                {};
                if ui
                    .button(RichText::new("üíæ").size(32.0))
                    .on_hover_text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
                    .clicked()
                {};
                if ui
                    .button(RichText::new("üñ¥").size(32.0))
                    .on_hover_text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫")
                    .clicked()
                {};

                ui.separator();
                if ui
                    .button(RichText::new("üóê").size(32.0))
                    .on_hover_text("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
                    .clicked()
                {};
                if ui
                    .button(RichText::new("üìö").size(32.0))
                    .on_hover_text("–í—Å—Ç–∞–≤–∏—Ç—å")
                    .clicked()
                {};
                if ui
                    .button(RichText::new("üóë").size(32.0))
                    .on_hover_text("–£–¥–∞–ª–∏—Ç—å")
                    .clicked()
                {};
                ui.separator();

                if ui
                    .button(RichText::new("üé®").size(32.0))
                    .on_hover_text("–°—Ö–µ–º–∞")
                    .clicked()
                {  *wstatus = "sha".to_string();};
                if ui
                    .button(RichText::new("üîô").size(32.0))
                    .on_hover_text("–ù–∞—Ä—É–∂—É")
                    .clicked()
                {  *wstatus = "back".to_string();};
                if ui
                    .button(RichText::new("üîö").size(32.0))
                    .on_hover_text("–í –≥–ª—É–±—å")
                    .clicked()
                {  *wstatus = "multy".to_string();};
                ui.separator();
                if ui
                    .button(RichText::new("üëÅ").size(32.0))
                    .on_hover_text("–ü—Å–µ–≤–¥–æ–∫–æ–¥")
                    .clicked()
                {  *wstatus = "p-cod".to_string();};
                if ui
                    .button(RichText::new("üëÄ").size(32.0))
                    .on_hover_text("Rust-–∫–æ–¥")
                    .clicked()
                {*wstatus = "R-cod".to_string();};
                if ui
                    .button(RichText::new("üöõ").size(32.0))
                    .on_hover_text("Cargo-–∫–æ–¥")
                    .clicked()
                { *wstatus = "C-cod".to_string();};
                ui.separator();
                if ui
                    .button(RichText::new("‚ñ∂").size(32.0))
                    .on_hover_text("–ó–∞–ø—É—Å—Ç–∏—Ç—å")
                    .clicked()
                {};
                if ui
                    .button(RichText::new("‚òë").size(32.0))
                    .on_hover_text("–ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å")
                    .clicked()
                {};
                if ui
                    .button(RichText::new("‚úà").size(32.0))
                    .on_hover_text("Cargo-format")
                    .clicked()
                {};
            });
        });

        // }; //- end FN!
        egui::SidePanel::left("elements_panel").show(ctx, |ui| {
            ui.heading("–≠–ª–µ–º–µ–Ω—Ç—ã");
            // —Å—é–¥–∞ –∑–∞–ø–æ–ª–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        });

        egui::SidePanel::right("side_panel").show(ctx, |ui| {
            ui.heading("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã");

            
                // —Å—é–¥–∞ –≤ —Ü–∏–∫–ª–µ –ø–∏—à–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞
           

            ui.with_layout(egui::Layout::bottom_up(egui::Align::LEFT), |ui| {
                ui.horizontal(|ui| {
                    ui.spacing_mut().item_spacing.x = 0.0;
                    ui.label("powered by ");
                    ui.hyperlink_to("egui", "https://github.com/emilk/egui");
                    ui.label(" and ");
                    ui.hyperlink_to("eframe", "https://github.com/emilk/egui/tree/master/eframe");
                });
            });
        });

        egui::CentralPanel::default().show(ctx, |_ui| {
            // –æ–∫–Ω–æ —Å—Ö–µ–º–∞ -–∞–ª–≥–æ—Ä–∏—Ç–º \ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ \ –∫–æ–¥ —Å—Ö–µ–º—ã

            //===============================================
           if wstatus == "nelement" {
            egui::Window::new("New Component").title_bar(true).collapsible(true).show(ctx, |ui| {
                ui.horizontal(|ui| {
                ui.horizontal(|ui| {
                    ui.label("Packeth: ");
                    ui.text_edit_singleline(label)
                        .on_hover_text("–ü–∞–∫–µ—Ç - —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞  –∏–∑ https://crates.io");
                });
                ui.horizontal(|ui| {
                    ui.label("Component: ");
                    ui.text_edit_singleline(component).on_hover_text(
                        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–æ–±—ã—á–Ω–æ –≤–∏–¥–∂–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
                    );
                });
            });
                    ui.horizontal(|ui| {
                ui.horizontal(|ui| {
                    ui.label("Version");
                    ui.text_edit_singleline(version)
                        .on_hover_text("–≤–µ—Ä—Å–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞");
                });
                        ui.horizontal(|ui| {
                    ui.label("Authors: ");
                    ui.text_edit_singleline(authors)
                        .on_hover_text("–ê–≤—Ç–æ—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞");
                });
            });
                    ui.horizontal(|ui| {
                ui.horizontal(|ui| {
                    ui.label("Edition: ");
                    ui.text_edit_singleline(edition)
                        .on_hover_text("–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏");
                });
                ui.horizontal(|ui| {
                    ui.label("Rust Ver: ");
                    ui.text_edit_singleline(rustver)
                        .on_hover_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –†–∞—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã");
                });
            });
            ui.horizontal(|ui| {
                ui.vertical(|ui| {
                    ui.label("Methods: ");
                    ui.text_edit_multiline(methods)
                        .on_hover_text("–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –ºe—Ç–æ–¥—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ ");
                });
                ui.vertical(|ui| {
                    ui.label("Parameters: ");
                    ui.text_edit_multiline(parametres)
                        .on_hover_text("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –ø–æ—Å—Ç—Ä–æ—á–Ω–æ (–ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø—Ü–∏–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ, —Ç–æ —á–µ—Ä–µ–∑ \\|");
                });
            });
            ui.horizontal(|ui| {
                ui.vertical(|ui| {
                    ui.label("S-Code: ");
                    ui.text_edit_multiline(scode)
                        .on_hover_text("–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π –∫–æ–¥");
                });
                ui.vertical(|ui| {
                    ui.label("Rust Code: ");
                    ui.text_edit_multiline(rscode)
                        .on_hover_text("–ö–æ–Ω–µ—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏");
                });
            });
            ui.with_layout(egui::Layout::top_down_justified(egui::Align::Center), |ui| {
            ui.horizontal(|ui| {
            if ui.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å").on_hover_text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è").clicked(){ };
            if ui.button("–ó–∞–∫—Ä—ã—Ç—å").on_hover_text("–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è").clicked(){   };

            });  
        });
                 }); //-> end window
                };
                if wstatus =="newprj" { 
                    egui::Window::new("New project").title_bar(true).collapsible(true).show(ctx, |ui| { 
                    ui.label("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: ");
                    ui.text_edit_singleline(prj)
                        .on_hover_text("–°–æ–∑–¥–∞—Å—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–∞–ø–∫–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                    if ui.button("OK").clicked() { 

                       
                       // use std::process::Command;
                       // Command::new("cargo").arg ("new").arg(label);
                    };
                 });  
                };
                if wstatus == "help"{
                    _ui.label("read.me");
                };
        }); //-> end panel
        egui::TopBottomPanel::bottom("bottom_panel").show(ctx, |ui| {
            //–æ–∫–Ω–æ –¥–µ–±–∞–≥–∞ \ –∫–æ–Ω—Å–æ–ª—å –∫–æ–º–∞–Ω–¥ \ –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
            egui::warn_if_debug_build(ui);
        });
        if false {
            egui::Window::new("Window").show(ctx, |ui| {
                ui.label("Windows can be moved by dragging them.");
                ui.label("They are automatically sized based on contents.");
                ui.label("You can turn on resizing and scrolling if you like.");
                ui.label("You would normally chose either panels OR windows.");
            });
        }
    }
}
